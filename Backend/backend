// Backend Server Modul (Node.js)

const WebSocket = require('ws');
const http = require('http');
// const db = require('./db'); // Beispiel: Import für Datenbank-Modul
// const stt = require('./stt'); // Beispiel: Import für STT-Integration
// const llm = require('./llm'); // Beispiel: Import für LLM-Integration

// HTTP Server für Initial Handshake
const server = http.createServer((req, res) => {
  // Hier könnte Logik für initiale HTTP Anfragen sein (z.B. Validierung vor WebSocket-Upgrade)
  // Das Diagramm zeigt einen HTTP/1.1 101 Switching Protocols Request
});

// WebSocket Server auf dem HTTP Server aufsetzen
const wss = new WebSocket.Server({ server });

// Handler für neue WebSocket Verbindungen
wss.on('connection', (ws, req) => {
  // Initial Handshake & Validierung (JWT Token)
  // Prüfe Header (Upgrade: websocket, Connection: Upgrade, Authorization: Bearer <JWT>)
  const token = req.headers['authorization']?.split(' ')[1];
  if (!validateToken(token)) { // validateToken wäre eine eigene Funktion
    ws.send(JSON.stringify({ type: 'error', message: 'Authentication failed' }));
    ws.close(1008, 'Authentication failed'); // WebSocket Close Code 1008 (Policy Violation)
    return;
  }

  // Verbindung ist etabliert und validiert
  console.log('Client verbunden');

  // Event Listener für Nachrichten vom Frontend
  ws.on('message', (message) => {
    // Nachrichten können Audio-Daten (OPUS/RTP), Steuerbefehle oder andere Daten sein 
    handleFrontendMessage(ws, message);
  });

  // Event Listener für geschlossene Verbindung
  ws.on('close', () => {
    console.log('Client getrennt');
    // Bereinigung: Queues leeren, Benutzer-Status aktualisieren etc.
  });

  // Event Listener für Fehler
  ws.on('error', (error) => {
    console.error('WebSocket Fehler:', error);
    // Fehlerbehandlung
  });

  // Sende Bestätigung oder initiale Daten ans Frontend
  ws.send(JSON.stringify({ type: 'connected', status: 'authenticated' }));
});

// Funktion zur Verarbeitung von Nachrichten vom Frontend
function handleFrontendMessage(ws, message) {
  // Nachricht parsen (wenn nicht reines Audio)
  // const data = JSON.parse(message);

  // Unterscheide nach Nachrichtentyp (Audio, Kommando, etc.)
  // Beispiel: Wenn Nachricht Audio ist:
  if (isAudioData(message)) { // isAudioData wäre eine eigene Prüffunktion
    // Audio-Daten in interne Queue legen oder direkt verarbeiten
    processAudioStream(ws, message);
  } else {
    // Andere Nachrichtentypen verarbeiten (z.B. Benutzeraktionen)
    handleControlMessage(ws, message);
  }
}

// Funktion zur Verarbeitung des Audio-Streams
async function processAudioStream(ws, audioChunk) {
  // Audio-Chunk (OPUS/RTP) entgegennehmen
  // Ggf. Audio-Daten sammeln/puffern, bis genügend für STT vorhanden ist
  // Zum STT-Modul schicken
  // const transcript = await stt.process(audioChunk); // Beispiel: Aufruf STT Modul

  // Transkript verarbeiten (z.B. in Transkript-Queue legen, an Frontend schicken)
  // checkAndGenerateExplanations(transcript); // Prüfe auf erklärungsbedürftige Wörter
}

// Funktion zur Verarbeitung von Steuerbefehlen
function handleControlMessage(ws, message) {
  // Logik für Befehle wie: Meeting starten/beitreten, Mikrofon stummschalten, etc.
  // Beispiel:
  // if (message.type === 'joinMeeting') { ... }
}

// Funktion zur Überprüfung und Generierung von Erklärungen
async function checkAndGenerateExplanations(transcriptSnippet) {
  // Analysiere Transkript-Snippet auf erklärungsbedürftige Wörter
  // Hole relevanten Meeting-Kontext & Benutzer-Domänen aus der DB
  // const context = await db.getMeetingContext(...);
  // const userDomains = await db.getActiveUserDomains(...);

  // Sende relevante Daten an das LLM zur Erklärung
  // const explanation = await llm.generateExplanation(transcriptSnippet, context, userDomains); // Beispiel: Aufruf LLM Modul

  // Erklärung ans Frontend schicken (über FromFrontendQueue)
  // sendExplanationToFrontend(explanation);
}

// Funktion zum Senden von Daten ans Frontend
function sendToFrontend(ws, data) {
  // Daten in FromFrontendQueue legen
  // Queue verarbeiten und Daten über WebSocket senden
  ws.send(JSON.stringify(data));
}

// Hilfsfunktion zur Validierung des JWT Tokens
function validateToken(token) {
  // Logik zur JWT Validierung (Signatur prüfen, Ablaufdatum, etc.)
  return true; // Platzhalter
}


// Server starten
const PORT = process.env.PORT || 8080;
server.listen(PORT, () => {
  console.log(`Backend Server läuft auf Port ${PORT}`);
});