class MessageQueue {
    constructor() {
        this.queue = [];
        this.pending = [];
    }

    enqueue(message) {
        this.queue.push(message);
        // Resolve any pending dequeue promises
        while (this.pending.length > 0 && this.queue.length > 0) {
            const resolve = this.pending.shift();
            resolve(this.queue.shift());
        }
    }

    async dequeue() {
        if (this.queue.length > 0) {
            return this.queue.shift();
        }
        // If queue is empty, return a promise that resolves when item is available
        return new Promise(resolve => this.pending.push(resolve));
    }

    size() {
        return this.queue.length;
    }
}

// Initialize queues
const toBackendQueue = new MessageQueue();
const fromBackendQueue = new MessageQueue();

// WebSocket connection
let websocket = null;

// Process outgoing messages
async function processOutgoingQueue() {
    while (true) {
        const message = await toBackendQueue.dequeue();
        try {
            if (websocket && websocket.readyState === WebSocket.OPEN) {
                websocket.send(JSON.stringify(message));
            } else {
                // Requeue if not connected
                toBackendQueue.enqueue(message);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        } catch (error) {
            console.error('Failed to send message:', error);
            toBackendQueue.enqueue(message); // Requeue on failure
        }
    }
}

// Queue display elements
let queueDisplay = null;

// Start processing queues when page loads
document.addEventListener('DOMContentLoaded', () => {
    // Create queue display
    queueDisplay = document.createElement('div');
    queueDisplay.style.position = 'fixed';
    queueDisplay.style.bottom = '10px';
    queueDisplay.style.right = '10px';
    queueDisplay.style.backgroundColor = 'white';
    queueDisplay.style.padding = '10px';
    queueDisplay.style.border = '1px solid black';
    queueDisplay.style.zIndex = '1000';
    document.body.appendChild(queueDisplay);

    // Add simulation controls
    const simControls = document.createElement('div');
    simControls.innerHTML = `
        <button id="startSim">Start Simulation</button>
        <button id="stopSim">Stop Simulation</button>
    `;
    document.body.appendChild(simControls);

    document.getElementById('startSim').addEventListener('click', startSimulation);
    document.getElementById('stopSim').addEventListener('click', stopSimulation);

    processOutgoingQueue();
    processIncomingQueue();
    setInterval(updateQueueDisplay, 1000);
});

function updateQueueDisplay() {
    if (!queueDisplay) return;
    
    queueDisplay.innerHTML = `
        <h3>Queue Status</h3>
        <p>To Backend: ${toBackendQueue.size()}</p>
        <p>From Backend: ${fromBackendQueue.size()}</p>
        <p>Last Message: ${lastMessage || 'None'}</p>
    `;
}

let lastMessage = null;

async function startSimulation() {
    const response = await fetch('http://localhost:8000/simulation/start');
    console.log(await response.json());
}

async function stopSimulation() {
    const response = await fetch('http://localhost:8000/simulation/stop');
    console.log(await response.json());
}

// Modify processIncomingQueue to track last message
async function processIncomingQueue() {
    while (true) {
        const message = await fromBackendQueue.dequeue();
        if (message) {
            lastMessage = JSON.stringify(message);
            console.log('Received from backend:', message);
            updateQueueDisplay();
        }
    }
}

// Event Handler (Beispiel für einen Start Button)
startButton.addEventListener('click', () => {
  initWebSocket();
});

// Funktion zur Initialisierung der WebSocket Verbindung
function initWebSocket() {
  // Erstelle WebSocket URL (z.B. ws://localhost:8080)
  const wsUrl = `ws://localhost:8080`; // Anpassen je nach Deployment

  websocket = new WebSocket(wsUrl);

  // Event Listener für geöffnete Verbindung
  websocket.onopen = () => {
    console.log('WebSocket Verbindung geöffnet');
    // Initial Handshake initiieren (falls nicht schon über URL/Protokoll geschehen)
    // Oder einfach auf Bestätigung vom Server warten
    // Sende JWT falls nötig, z.B. im Authorization Header beim Initial Request (siehe Backend)
  };

  // Event Listener für Nachrichten vom Backend
  websocket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    lastMessage = event.data;
    fromBackendQueue.enqueue(data);
    updateQueueDisplay();
    handleBackendMessage(data);
  };

  // Event Listener für geschlossene Verbindung
  websocket.onclose = (event) => {
    console.log('WebSocket Verbindung geschlossen:', event.code, event.reason);
    // UI aktualisieren, Wiederverbindungsversuch starten etc.
  };

  // Event Listener für Fehler
  websocket.onerror = (error) => {
    console.error('WebSocket Fehler:', error);
    // Fehler im UI anzeigen
  };
}

// Funktion zum Senden von Daten an das Backend
function sendToBackend(data) {
  if (websocket && websocket.readyState === WebSocket.OPEN) {
    // Daten in ToBackendQueue legen
    toBackendQueue.push(data);
    // Queue verarbeiten und senden
    processToBackendQueue();
  } else {
    console.warn('WebSocket nicht verbunden, kann nicht senden.');
    // Ggf. Daten puffern oder Fehler anzeigen
  }
}

// Funktion zur Verarbeitung der ToBackendQueue
function processToBackendQueue() {
  while (toBackendQueue.length > 0 && websocket.readyState === WebSocket.OPEN) {
    const data = toBackendQueue.shift();
    websocket.send(JSON.stringify(data));
    // Bei Audio muss evtl. direkt gesendet werden, ohne JSON.stringify, je nach Format (ArrayBuffer, Blob etc.)
    // websocket.send(audioBlob); // Beispiel für Audio
  }
}


// Funktion zur Verarbeitung von Nachrichten vom Backend
function handleBackendMessage(data) {
  // Nachricht in FromFrontendQueue legen
  fromBackendQueue.push(data);
  // Queue verarbeiten
  processFromBackendQueue();
}

// Funktion zur Verarbeitung der FromFrontendQueue
function processFromFrontendQueue() {
  while (fromBackendQueue.length > 0) {
    const data = fromFrontendQueue.shift();

    // Unterscheide nach Nachrichtentyp vom Backend
    switch (data.type) {
      case 'connected':
        console.log('Backend bestätigt Verbindung:', data.status);
        // UI aktualisieren (z.B. "Verbunden, bereit")
        break;
      case 'transcript_update':
        // Zeige aktuelles Transkript an
        updateTranscriptDisplay(data.text);
        break;
      case 'explanation':
        // Zeige die Erklärung an
        displayExplanation(data.term, data.explanation);
        break;
      case 'error':
        // Zeige Fehlermeldung an
        displayError(data.message);
        break;
      // Weitere Typen (z.B. Benutzer im Meeting, Status-Updates)
      default:
        console.warn('Unbekannte Nachricht vom Backend:', data);
    }
  }
}

// Funktionen zur Aktualisierung der UI (Platzhalter)
function updateTranscriptDisplay(text) {
  // Transkript-Bereich im UI aktualisieren
  // inputArea.value = text; // Beispiel
}

function displayExplanation(term, explanation) {
  // Erklärung im UI anzeigen (z.B. als Popup oder im separaten Bereich)
  // explanationArea.innerHTML = `<b>${term}:</b> ${explanation}`; // Beispiel
}

function displayError(message) {
  // Fehlermeldung im UI anzeigen
  // alert('Fehler: ' + message); // Beispiel
}


// Funktion zur Audio-Erfassung und zum Senden
async function startAudioCapture() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        // Hier müsste die Logik implementiert werden, um Audio-Chunks
        // im richtigen Format (OPUS) zu erhalten und über sendToBackend zu senden.
        // Das erfordert möglicherweise weitere Bibliotheken oder Konvertierung.

        mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                // Event.data ist ein Blob, muss ggf. zu ArrayBuffer/OPUS konvertiert werden
                // und dann über den WebSocket gesendet werden.
                // sendToBackend(event.data); // Dies sendet den Blob, evtl. nicht das gewünschte Format
            }
        };

        mediaRecorder.start(100); // Starte Aufnahme, liefert Daten alle 100ms
        console.log('Audioaufnahme gestartet');

    } catch (error) {
        console.error('Fehler beim Zugriff auf Mikrofon:', error);
        displayError('Kann auf Mikrofon nicht zugreifen. Bitte Berechtigung prüfen.');
        // Fehlerbehandlung wie im Diagramm erwähnt
    }
}

// startAudioCapture(); // Beispiel: Audioaufnahme direkt beim Laden starten (nach Verbindungsaufbau)
